#! /usr/bin/env python3

import struct,socket,argparse,concurrent.futures,threading
Description ="""Client che manda connessione di tipo B"""
HOST = "127.0.0.1" 
PORT =57537

def main(file,host=HOST,port=PORT):
    with socket.socket(socket.AF_INET,socket.SOCK_STREAM) as s:
        s.connect((host,port))
        s.sendall(b'B')
        with open(file,"r") as f:
            for stringa in f:
                bytes_stringa=stringa.encode()
                if len(bytes_stringa)==1:
                    continue
                s.sendall(struct.pack("!i",len(bytes_stringa)))
                s.sendall(bytes_stringa)
        global fine     
        with lock:
            fine+=1
        if fine == len(args.input_file):
            s.sendall(struct.pack("!i",0))
        s.shutdown(socket.SHUT_RDWR)

    




if __name__ == '__main__':
    parser = argparse.ArgumentParser(description=Description, formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('input_file',nargs='+',help='files di input',type=str)
    parser.add_argument('-a',help='host address',type=str,default=HOST)
    parser.add_argument('-p',help='port',type=int,default=PORT)
    args=parser.parse_args()
    assert len(args.input_file)>0 ,"Il numero di file che prende in input deve essere maggiore o uguale ad 1"
    fine=0
    lock=threading.Lock()
    with concurrent.futures.ThreadPoolExecutor(max_workers=len(args.input_file)) as executor:
        for file in args.input_file:
            executor.submit(main,file,args.a,args.p)
            


























